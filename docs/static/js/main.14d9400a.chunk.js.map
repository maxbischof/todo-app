{"version":3,"sources":["Components/Todo.js","Container/Todolist.js","Components/Form.js","App.js","serviceWorker.js","GlobalStyles.js","index.js"],"names":["Article","styled","article","props","done","Checkbox","input","Title","h3","Description","p","DeleteAction","span","Todo","title","description","deleteTodo","index","changeDone","type","defaultChecked","onChange","className","onClick","Todolist","todos","sortedTodos","sort","a","b","List","map","todo","key","section","Form","add","useState","setTitle","setDescription","StyledForm","onSubmit","event","preventDefault","Headline","Input","Label","htmlFor","InputField","id","name","target","value","Button","form","button","div","label","App","setTodos","Div","Header","Line","newTodos","splice","h1","header","hr","Boolean","window","location","hostname","match","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyles","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14d9400a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Todo = ({ title, description, done, deleteTodo, index, changeDone }) => {\n  return <Article done={done}>\n      <Checkbox\n        type=\"checkbox\"\n        defaultChecked={done}\n        onChange={() => changeDone(index)}\n      />\n      <Title className=\"todo_title\">{title}</Title>\n      <Description className=\"todo_description\">{description}</Description>\n      <DeleteAction className=\"todo_delete\" onClick={() => deleteTodo(index)}>\n        Delete\n      </DeleteAction>\n    </Article>\n}\n\nconst Article = styled.article`\n    display: grid;\n    grid-template-columns: 40px 1fr;\n    grid-template-rows: 1fr 1fr;\n    margin: 20px 20px 0 20px;\n    background-color: #fff;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n      0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n    padding: 0px 10px 0px 10px;\n    border-radius: 10px;\n    ${props => props.done ? 'color: #9e9e9e;' : ''}\n  `\n\n  const Checkbox = styled.input`\n    grid-column: 1/2;\n    padding: 0;\n    margin: 15px 0px 0px 10px;\n  `\n\n  const Title = styled.h3`\n    padding: 15px 0px 0px 15px;\n    margin: 0;\n    grid-column: 2/3;\n    word-break: break-word;\n  `\n\n  const Description = styled.p`\n    padding: 0px 0px 0px 15px;\n    margin: 0;\n    grid-column: 2/3;\n  `\n\n  const DeleteAction = styled.span`\n    grid-column: 2/3;\n    color: #e63946;\n    font-size: 13px;\n    cursor: pointer;\n    padding: 0px 0px 5px 15px;\n  `\n\nexport default Todo\n","import React from \"react\"\nimport Todo from \"../Components/Todo\"\nimport styled from 'styled-components'\n\nconst Todolist = ({ todos, deleteTodo, changeDone }) => {\n  const sortedTodos = todos.sort((a,b) => a.done - b.done)\n  return <List>\n    {sortedTodos.map((todo, index) => \n    <Todo\n    key={todo.title}\n    title={todo.title}\n    description={todo.description}\n    done={todo.done}\n    deleteTodo={deleteTodo}\n    index={index}\n    changeDone={changeDone}\n  />)}\n  </List>\n}\n\nexport default Todolist\n\nconst List = styled.section`\n  border-top-left-radius:  20px;\n  border-top-right-radius:  20px;\n  background-color: white;\n  place-items: center;\n  width: 100%`\n","import React, { useState } from \"react\"\nimport styled from 'styled-components'\n\nfunction Form({ add }) {\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n\n  function handleSubmit(event) {\n    add({ title: title, description: description, done: false })\n    event.preventDefault()\n  }\n\n  function handleTitleChange(event) {\n    setTitle(event.target.value)\n  }\n\n  function handleDescriptionChange(event) {\n    setDescription(event.target.value)\n  }\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <Headline>Add new todo</Headline>\n      <Input>\n        <Label htmlFor=\"title\">Title</Label>\n        <InputField\n          id=\"title\"\n          type=\"text\"\n          name=\"title\"\n          onChange={handleTitleChange}\n        />\n      </Input>\n\n      <Input>\n        <Label htmlFor=\"description\">Description</Label>\n        <InputField\n          id=\"description\"\n          type=\"text\"\n          name=\"description\"\n          onChange={handleDescriptionChange}\n        />\n      </Input>\n\n      <Button type=\"submit\" value=\"Submit\">\n        Add todo\n      </Button>\n    </StyledForm>\n  )\n}\n\nexport default Form\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 20px 20px 20px 20px;\n  margin: 0 0 20px 0;\n  background-color: white;\n  border-radius: 20px;`\n\nconst Button = styled.button`\ntext-decoration: none;\ncolor: #fff;\nbackground-color: #26a69a;\ntext-align: center;\nborder: none;\nborder-radius: 2px;\nheight: 36px;\nline-height: 36px;\npadding: 0 16px;\nmargin: 20px 0px 0px 0px;\ntext-transform: uppercase;\ntext-align: center;`\n\nconst InputField = styled.input`\n  background-color: transparent;\n  border: none;\n  border-bottom-color: currentcolor;\n  border-bottom-style: none;\n  border-bottom-width: medium;\n  border-bottom: 1px solid #9e9e9e;\n  border-radius: 0;\n  outline: none;\n  width: 100%;\n  font-size: 16px;\n  padding: 0;\n  height: 40px;`\n\nconst Input  = styled.div`\n  position: relative;\n  margin-bottom: 15px;\n  height: 40px;`\n\nconst Label = styled.label`\n  position: absolute;\n  bottom: -17px;\n  left: 2px;\n  color: #9e9e9e;\n  font-size: 14px;`\n\nconst Headline = styled.h3`\n  margin: 0 0 10px 0;`","import React, { useState } from 'react'\nimport Todolist from './Container/Todolist'\nimport Form from './Components/Form'\nimport styled from 'styled-components'\n\nfunction App () {\n  const startTodos = [\n      {title: \"Eis kaufen\", description: \"ganz wichtig!\", done: false},\n      {title: \"Neue Fische Hausaufgaben\", description: \"React Intro\", done: true}\n    ]\n  const [todos, setTodos] = useState(startTodos)\n  \n  const addTodo = ({title, description, done}) => {\n    setTodos([...todos, {title, description, done}]\n  )}\n\n  const deleteTodo = (index) => {\n    const newTodos = [...todos]\n    newTodos.splice(index,1)\n    setTodos([...newTodos])\n  }\n\n  const changeDone = (index) => {\n    const newTodos = [...todos]\n    newTodos[index].done = !newTodos[index].done\n    setTodos([...newTodos])\n  }\n\n    return (\n      <Div>\n        <Header>\n          <Headline>Todo's App</Headline>\n          <Line />\n        </Header>\n        <Form add={addTodo}/>\n        <Todolist todos={todos} deleteTodo={deleteTodo} changeDone={changeDone}/>\n      </Div>\n    )\n}\n\nexport default App\n\nconst Div = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  background-color: #1d3557;`\n\nconst Headline = styled.h1`\n  color: white;\n  font-size: 20px;`\n\nconst Header = styled.header`\n  width: 80%;\n  margin: 0 0 10px 0;`\n\n\n\nconst Line = styled.hr`\n  color: gainsboro;\n  margin: 0 0 10px 0;`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n  body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n\n`\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalStyles from './GlobalStyles'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}